<?xml version="1.0" encoding="UTF-8"?>
<module name="ietf-keystore"
        xmlns="urn:ietf:params:xml:ns:yang:yin:1"
        xmlns:ks="urn:ietf:params:xml:ns:yang:ietf-keystore"
        xmlns:yang="urn:ietf:params:xml:ns:yang:ietf-yang-types"
        xmlns:nacm="urn:ietf:params:xml:ns:yang:ietf-netconf-acm">
  <namespace uri="urn:ietf:params:xml:ns:yang:ietf-keystore"/>
  <prefix value="ks"/>
  <import module="ietf-yang-types">
    <prefix value="yang"/>
  </import>
  <import module="ietf-netconf-acm">
    <prefix value="nacm"/>
  </import>
  <organization>
    <text>IETF NETCONF (Network Configuration) Working Group</text>
  </organization>
  <contact>
    <text>WG Web:   &lt;http://tools.ietf.org/wg/netconf/&gt;
WG List:  &lt;mailto:netconf@ietf.org&gt;

Author:   Kent Watsen
          &lt;mailto:kwatsen@juniper.net&gt;</text>
  </contact>
  <description>
    <text>This module defines a keystore to centralize management
of security credentials.

Copyright (c) 2017 IETF Trust and the persons identified
as authors of the code. All rights reserved.

Redistribution and use in source and binary forms, with
or without modification, is permitted pursuant to, and
subject to the license terms contained in, the Simplified
BSD License set forth in Section 4.c of the IETF Trust's
Legal Provisions Relating to IETF Documents
(http://trustee.ietf.org/license-info).

This version of this YANG module is part of RFC VVVV; see
the RFC itself for full legal notices.</text>
  </description>
  <revision date="2017-10-30">
    <description>
      <text>Initial version</text>
    </description>
    <reference>
      <text>RFC VVVV: YANG Data Model for a 'Keystore' Mechanism</text>
    </reference>
  </revision>
  <identity name="key-algorithm">
    <description>
      <text>Base identity from which all key-algorithms are derived.</text>
    </description>
  </identity>
  <identity name="rsa1024">
    <base name="key-algorithm"/>
    <description>
      <text>The RSA algorithm using a 1024-bit key.</text>
    </description>
    <reference>
      <text>RFC3447: Public-Key Cryptography Standards (PKCS) #1:
         RSA Cryptography Specifications Version 2.1.</text>
    </reference>
  </identity>
  <identity name="rsa2048">
    <base name="key-algorithm"/>
    <description>
      <text>The RSA algorithm using a 2048-bit key.</text>
    </description>
    <reference>
      <text>RFC3447: Public-Key Cryptography Standards (PKCS) #1:
         RSA Cryptography Specifications Version 2.1.</text>
    </reference>
  </identity>
  <identity name="rsa3072">
    <base name="key-algorithm"/>
    <description>
      <text>The RSA algorithm using a 3072-bit key.</text>
    </description>
    <reference>
      <text>RFC3447: Public-Key Cryptography Standards (PKCS) #1:
         RSA Cryptography Specifications Version 2.1.</text>
    </reference>
  </identity>
  <identity name="rsa4096">
    <base name="key-algorithm"/>
    <description>
      <text>The RSA algorithm using a 4096-bit key.</text>
    </description>
    <reference>
      <text>RFC3447: Public-Key Cryptography Standards (PKCS) #1:
         RSA Cryptography Specifications Version 2.1.</text>
    </reference>
  </identity>
  <identity name="rsa7680">
    <base name="key-algorithm"/>
    <description>
      <text>The RSA algorithm using a 7680-bit key.</text>
    </description>
    <reference>
      <text>RFC3447: Public-Key Cryptography Standards (PKCS) #1:
         RSA Cryptography Specifications Version 2.1.</text>
    </reference>
  </identity>
  <identity name="rsa15360">
    <base name="key-algorithm"/>
    <description>
      <text>The RSA algorithm using a 15360-bit key.</text>
    </description>
    <reference>
      <text>RFC3447: Public-Key Cryptography Standards (PKCS) #1:
         RSA Cryptography Specifications Version 2.1.</text>
    </reference>
  </identity>
  <identity name="secp192r1">
    <base name="key-algorithm"/>
    <description>
      <text>The secp192r1 algorithm.</text>
    </description>
    <reference>
      <text>RFC5480:
  Elliptic Curve Cryptography Subject Public Key Information.</text>
    </reference>
  </identity>
  <identity name="secp256r1">
    <base name="key-algorithm"/>
    <description>
      <text>The secp256r1 algorithm.</text>
    </description>
    <reference>
      <text>RFC5480:
  Elliptic Curve Cryptography Subject Public Key Information.</text>
    </reference>
  </identity>
  <identity name="secp384r1">
    <base name="key-algorithm"/>
    <description>
      <text>The secp384r1 algorithm.</text>
    </description>
    <reference>
      <text>RFC5480:
  Elliptic Curve Cryptography Subject Public Key Information.</text>
    </reference>
  </identity>
  <identity name="secp521r1">
    <base name="key-algorithm"/>
    <description>
      <text>The secp521r1 algorithm.</text>
    </description>
    <reference>
      <text>RFC5480:
  Elliptic Curve Cryptography Subject Public Key Information.</text>
    </reference>
  </identity>
  <typedef name="pinned-certificates">
    <type name="leafref">
      <path value="/ks:keystore/ks:pinned-certificates/ks:name"/>
    </type>
    <description>
      <text>This typedef enables importing modules to easily define a
reference to pinned-certificates.  Use of this type also
impacts the YANG tree diagram output.</text>
    </description>
    <reference>
      <text>I-D.ietf-netmod-yang-tree-diagrams: YANG Tree Diagrams</text>
    </reference>
  </typedef>
  <typedef name="pinned-host-keys">
    <type name="leafref">
      <path value="/ks:keystore/ks:pinned-host-keys/ks:name"/>
    </type>
    <description>
      <text>This typedef enables importing modules to easily define a
reference to pinned-host-keys.  Use of this type also
impacts the YANG tree diagram output.</text>
    </description>
    <reference>
      <text>I-D.ietf-netmod-yang-tree-diagrams: YANG Tree Diagrams</text>
    </reference>
  </typedef>
  <grouping name="private-key-grouping">
    <description>
      <text>A private/public key pair, and an action to request the
system to generate a private key.</text>
    </description>
    <leaf name="algorithm">
      <type name="identityref">
        <base name="key-algorithm"/>
      </type>
      <description>
        <text>Identifies the key's algorithm.  More specifically, this
leaf specifies how the 'private-key' and 'public-key'
binary leafs are encoded.</text>
      </description>
    </leaf>
    <leaf name="private-key">
      <nacm:default-deny-all/>
      <type name="union">
        <type name="binary"/>
        <type name="enumeration">
          <enum name="hardware-protected">
            <description>
              <text>The private key is inaccessible due to being
protected by a cryptographic hardware module
(e.g., a TPM).</text>
            </description>
          </enum>
        </type>
      </type>
      <must condition="../algorithm"/>
      <description>
        <text>A binary that contains the value of the private key.  The
interpretation of the content is defined by the key
algorithm.  For example, a DSA key is an integer, an RSA
key is represented as RSAPrivateKey as defined in
[RFC3447], and an Elliptic Curve Cryptography (ECC) key
is represented as ECPrivateKey as defined in [RFC5915]</text>
      </description>
      <reference>
        <text>RFC 3447: Public-Key Cryptography Standards (PKCS) #1:
          RSA Cryptography Specifications Version 2.1.
RFC 5915: Elliptic Curve Private Key Structure.</text>
      </reference>
    </leaf>
    <leaf name="public-key">
      <type name="binary"/>
      <must condition="../algorithm"/>
      <must condition="../private-key"/>
      <description>
        <text>A binary that contains the value of the public key.  The
interpretation of the content is defined by the key
algorithm.  For example, a DSA key is an integer, an RSA
key is represented as RSAPublicKey as defined in
[RFC3447], and an Elliptic Curve Cryptography (ECC) key
is represented using the 'publicKey' described in
[RFC5915]</text>
      </description>
      <reference>
        <text>RFC 3447: Public-Key Cryptography Standards (PKCS) #1:
          RSA Cryptography Specifications Version 2.1.
RFC 5915: Elliptic Curve Private Key Structure.</text>
      </reference>
    </leaf>
  </grouping>
  <grouping name="certificate-grouping">
    <description>
      <text>A container of certificates, and an action to generate
a certificate signing request.</text>
    </description>
    <container name="certificates">
      <description>
        <text>Certificates associated with this key.  More than one
certificate supports, for instance, a TPM-protected
key that has both IDevID and LDevID certificates
associated.</text>
      </description>
      <list name="certificate">
        <key value="name"/>
        <description>
          <text>A certificate for this private key.</text>
        </description>
        <leaf name="name">
          <type name="string"/>
          <description>
            <text>An arbitrary name for the certificate.</text>
          </description>
        </leaf>
        <leaf name="value">
          <type name="binary"/>
          <description>
            <text>A PKCS #7 SignedData structure, as specified by
Section 9.1 in RFC 2315, containing just certificates
(no content, signatures, or CRLs), encoded using ASN.1
distinguished encoding rules (DER), as specified in
ITU-T X.690.

This structure contains the certificate itself as well
as any intermediate certificates leading up to a trust
anchor certificate.  The trust anchor certificate MAY
be included as well.</text>
          </description>
          <reference>
            <text>RFC 2315:
  PKCS #7: Cryptographic Message Syntax Version 1.5.
ITU-T X.690:
  Information technology - ASN.1 encoding rules:
  Specification of Basic Encoding Rules (BER),
  Canonical Encoding Rules (CER) and Distinguished
  Encoding Rules (DER).</text>
          </reference>
        </leaf>
      </list>
    </container>
  </grouping>
  <container name="keystore">
    <nacm:default-deny-write/>
    <description>
      <text>The keystore contains X.509 certificates and SSH host keys.</text>
    </description>
    <list name="pinned-certificates">
      <key value="name"/>
      <description>
        <text>A list of pinned certificates.  These certificates can be
used by a server to authenticate clients, or by clients to
authenticate servers.   Each list of pinned certificates
SHOULD be specific to a purpose, as the list as a whole
may be referenced by other modules.  For instance, a
NETCONF server's configuration might use a specific list
of pinned certificates for when authenticating NETCONF
client connections.</text>
      </description>
      <leaf name="name">
        <type name="string"/>
        <description>
          <text>An arbitrary name for this list of pinned certificates.</text>
        </description>
      </leaf>
      <leaf name="description">
        <type name="string"/>
        <description>
          <text>An arbitrary description for this list of pinned
certificates.</text>
        </description>
      </leaf>
      <list name="pinned-certificate">
        <key value="name"/>
        <description>
          <text>A pinned certificate.</text>
        </description>
        <leaf name="name">
          <type name="string"/>
          <description>
            <text>An arbitrary name for this pinned certificate. The
name must be unique across all lists of pinned
certificates (not just this list) so that leafrefs
from another module can resolve to unique values.</text>
          </description>
        </leaf>
        <leaf name="data">
          <type name="binary"/>
          <mandatory value="true"/>
          <description>
            <text>An X.509 v3 certificate structure as specified by RFC
5280, Section 4 encoded using the ASN.1 distinguished
encoding rules (DER), as specified in ITU-T X.690.</text>
          </description>
          <reference>
            <text>RFC 5280:
  Internet X.509 Public Key Infrastructure Certificate
  and Certificate Revocation List (CRL) Profile.
ITU-T X.690:
   Information technology - ASN.1 encoding rules:
   Specification of Basic Encoding Rules (BER),
   Canonical Encoding Rules (CER) and Distinguished
   Encoding Rules (DER).</text>
          </reference>
        </leaf>
      </list>
    </list>
    <list name="pinned-host-keys">
      <key value="name"/>
      <description>
        <text>A list of pinned host keys.  These pinned host-keys can
be used by clients to authenticate SSH servers.  Each
list of pinned host keys SHOULD be specific to a purpose,
so the list as a whole may be referenced by other modules.
For instance, a NETCONF client's configuration might
point to a specific list of pinned host keys for when
authenticating specific SSH servers.</text>
      </description>
      <leaf name="name">
        <type name="string"/>
        <description>
          <text>An arbitrary name for this list of pinned SSH host keys.</text>
        </description>
      </leaf>
      <leaf name="description">
        <type name="string"/>
        <description>
          <text>An arbitrary description for this list of pinned SSH host
keys.</text>
        </description>
      </leaf>
      <list name="pinned-host-key">
        <key value="name"/>
        <description>
          <text>A pinned host key.</text>
        </description>
        <leaf name="name">
          <type name="string"/>
          <description>
            <text>An arbitrary name for this pinned host-key. Must be
unique across all lists of pinned host-keys (not just
this list) so that a leafref to it from another module
can resolve to unique values.</text>
          </description>
        </leaf>
        <leaf name="data">
          <type name="binary"/>
          <mandatory value="true"/>
          <description>
            <text>The binary public key data for this SSH key, as
specified by RFC 4253, Section 6.6, i.e.:

  string    certificate or public key format
            identifier
  byte[n]   key/certificate data.</text>
          </description>
          <reference>
            <text>RFC 4253: The Secure Shell (SSH) Transport Layer
          Protocol</text>
          </reference>
        </leaf>
      </list>
    </list>
  </container>
  <notification name="certificate-expiration">
    <description>
      <text>A notification indicating that a configured certificate is
either about to expire or has already expired.  When to send
notifications is an implementation specific decision, but
it is RECOMMENDED that a notification be sent once a month
for 3 months, then once a week for four weeks, and then once
a day thereafter.</text>
    </description>
    <leaf name="certificate">
      <type name="instance-identifier"/>
      <mandatory value="true"/>
      <description>
        <text>Identifies which certificate is expiring or is expired.</text>
      </description>
    </leaf>
    <leaf name="expiration-date">
      <type name="yang:date-and-time"/>
      <mandatory value="true"/>
      <description>
        <text>Identifies the expiration date on the certificate.</text>
      </description>
    </leaf>
  </notification>
</module>
